#include "s21_calc.h"

#test equal
    int a = 2;
    int b = 2;
    ck_assert_int_eq(a, b);


#test simple_stack_tests
    Stack_t stack;
    Stack_t *st = &stack;
    init_stack(st);
    ck_assert_int_eq(0, st->n);
    ck_assert_int_eq(0, st->s);
    ck_assert_int_eq(1, number_is_empty(st));
    ck_assert_int_eq(1, sign_is_empty(st));
    ck_assert_int_eq(0, number_is_full(st));
    ck_assert_int_eq(0, sign_is_full(st));

    for (int i = 1; i <= N; i++) {
        add_number(st, i);
        ck_assert_int_eq(i, st->n);
        ck_assert_double_eq(i, st->num[st->n - 1]);
        ck_assert_int_eq(0, number_is_empty(st));
    }
    ck_assert_int_eq(1, number_is_full(st));

    add_sign(st, 'a');
    add_sign(st, '+');
    char str1[10] = "\0";
    str1[0] = st->sign[st->s - 1];
    ck_assert_str_eq("+", str1);
    ck_assert_int_eq(2, st->s);
    ck_assert_int_eq(0, sign_is_empty(st));

    
    char str2[10] = "\0";
    str2[0] = remove_sign(st);
    ck_assert_str_eq("+", str2);

    remove_sign(st);
    ck_assert_int_eq(0, st->s);
    ck_assert_int_eq(1, sign_is_empty(st));
    ck_assert_int_eq(1, sign_is_empty(st));

    for (int i = N; i >= 1; i--) {
        remove_number(st);
        ck_assert_int_eq(i - 1, st->n);
        ck_assert_double_eq(i, st->num[st->n]);
    }
    ck_assert_int_eq(0, number_is_full(st));
    ck_assert_int_eq(1, number_is_empty(st));

    add_number(st, 3.456);
    ck_assert_double_eq(3.456, st->num[st->n - 1]);


#test calculation
    Stack_t stack;
    Stack_t *st = &stack;

    char *input = (char*)calloc(255, sizeof(char));

    snprintf(input, 255, "%s", "2 + 2 =");
    parser(input, st);
    ck_assert_float_eq(4, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "sin ( 10 ) =");
    parser(input, st);
    ck_assert_float_eq(-0.5440211109, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "cos ( 10 ) =");
    parser(input, st);
    ck_assert_float_eq(-0.8390715291, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "16 mod 4 =");
    parser(input, st);
    ck_assert_float_eq(0, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "9 mod 4 + sin ( 10 ) - tan ( 1 ) - asin ( 0.5 ) * acos ( 0.67 ) / atan ( 47.6 ) =");
    parser(input, st);
    ck_assert_float_eq(-1.3840709515, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "-2 + ( 3.3 - 1 ) * 4 ^ 2.7 - ( 2 + 2 ) * 2 / sqrt ( ln ( 144 ) ) - log ( 10 ) * ln ( 10 ) =");
    parser(input, st);
    ck_assert_float_eq(89.2246393042, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "log ( 10 ) =");
    parser(input, st);
    ck_assert_float_eq(1, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "12 + ( -3 + 2 ^ ( 8 * 23 - 4 ) - 5 * ( 67 / 4.6 ) ) =");
    parser(input, st);
    ck_assert_float_eq(1532495540865888858358347027150309183618739122183602176.0000000000, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "12 + sin ( 5 ) - 2 =");
    parser(input, st);
    ck_assert_float_eq(9.0410757253368615311068455938440060266475384560353982218683275457, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "sin ( sin ( 5 ) ) =");
    parser(input, st);
    ck_assert_float_eq(-0.818574144461719269169636, st->num[st->n - 1]);

    snprintf(input, 255, "%s", "sin ( 90 ) =");
    parser(input, st);
    ck_assert_float_eq(0.893996663600, st->num[st->n - 1]);

    free(input);